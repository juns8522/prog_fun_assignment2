public class SlotCollection
{
    private Slot slot1;
    private Slot slot2;
    private Slot slot3;
    private Slot slot4;

    public SlotCollection(int x1, int x2, int x3, int x4)
    {
        slot1 = new Slot(x1);
        slot2 = new Slot(x2);
        slot3 = new Slot(x3);
        slot4 = new Slot(x4);
    }

    public int getSize()
    {
        return 4; // This should be changed to return the correct number of stones.
    }

    public Slot getSlot(int i)
    {
        switch (i)
        {
            case 0: return slot1;
            case 1: return slot2;
            case 2: return slot3;
            case 3: return slot4;
            default: return null;
        }
    }
    // You should eventually delete the following 4 methods:
    public Slot getSlot1() { return slot1; }
    public Slot getSlot2() { return slot2; }
    public Slot getSlot3() { return slot3; }
    public Slot getSlot4() { return slot4; }


    // If you want to improve this code,
    // make the first parameter a slot position rather than a slot.
    public void placeStone(Slot slot, int number)
    {
        slot.setStone(new Stone(number));
    }

    public boolean isFilled()
    {
        return slot1.isFilled() && slot2.isFilled() && slot3.isFilled() && slot4.isFilled();
    }

    public boolean moveFrom(Slot slot)
    {
        // Note: To understand this code correctly,
        // read about "Short circuit" evaluation in the week 5 lecture notes.
        return slot.moveTo(slot1) || slot.moveTo(slot2) || slot.moveTo(slot3) || slot.moveTo(slot4);
    }

    public boolean moveTo(Slot slot)
    {
        // Note: To understand this code correctly,
        // read about "Short circuit" evaluation in the week 5 lecture notes.
        return slot4.moveTo(slot) || slot3.moveTo(slot) || slot2.moveTo(slot) || slot1.moveTo(slot);
    }

    public String toString()
    {
        return slot1 + " " + slot2 + " " + slot3 + " " + slot4;
    }
}
